- 단위 테스트를 배우기 전에 진행한 개발 방식
    1. 코드 작성
    2. 프로그램 실행
    3. Postman과 같은 API 테스트 도구로 Http 요청
    4. 요청 결과를 System.out.println() 으로 검증
    5. 결과가 다르다면, 프로그램 중지 후 코드 수정

위의 방식에서 2~5번은 코드를 수정할 때마다 반복해야만 한다. 테스트 코드가 없다 보니 눈과 손으로 계속해서 확인이 필요
이러한 수동 검증을 막기 위한 자동 검증 개발 방식을 지향하면, 기존 연관되어 있는 API 가 잘 작동하는지도 보장한다.


- DTO
    : 절대로 Entity 클래스를 Request/Response 클래스로 사용해서는 안된다.
    : Entity 클래스는 DB와 맞닿는 핵심 클래스이다. 엔티티를 기준으로 테이블이 생성되고 변경되는 핵심으로 수 많은 로직들이 엔티티를 기준으로 동작한다.
    : Entity 클래스가 변경되면 여러 클래스에 영향을 끼치므로 View Layer와 DB Layer의 역할 분리를 철저하게 해주자
    : 실제로 Controller 에서 결과값으로 여러 테이블을 조인해서 줘야 할 경우가 빈번하므로 Entity 클래스만으로 표현하기 어렵다. 그러면 DTO를 이요하자

- JPA Auditing
    반복적인 코드가 모든 테이블과 서비스 메소드에 포함되어야 한다고 생각할때 사용 (등록/수정)